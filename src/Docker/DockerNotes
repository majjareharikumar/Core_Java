✅ 1. What is Docker?
Answer:
Docker is an open-source platform that enables developers to automate the deployment of applications inside lightweight, portable containers. Containers package an application with its dependencies, making it run consistently across environments. Docker eliminates the "it works on my machine" problem.
Example: You can package a Java app with Tomcat in a Docker image and run it the same way on dev, QA, and prod.

✅ 2. What is the difference between a Docker image and a container?
Answer:
A Docker image is a blueprint or snapshot that contains the application and its dependencies. A container is a running instance of that image. You can think of an image like a class and a container like an object.
Example: docker run nginx creates a container from the nginx image.

✅ 3. What is Dockerfile?
Answer:
A Dockerfile is a text file containing instructions to build a Docker image. It specifies the base image, dependencies, configuration, and commands to run inside the container.
Example:

dockerfile
Copy
Edit
FROM openjdk:17
COPY . /app
CMD ["java", "-jar", "/app/app.jar"]
✅ 4. What is Docker Compose?
Answer:
Docker Compose is a tool used to define and run multi-container Docker applications using a docker-compose.yml file. It’s useful for microservices that depend on multiple services like databases, caches, etc.
Example: You can use it to run a Spring Boot app with a MySQL database together.

✅ 5. How is Docker different from a virtual machine (VM)?
Answer:
Docker containers share the host OS kernel and are lightweight, while VMs run a full OS and are heavier. Containers start faster and use fewer resources than VMs.
Example: Starting a Docker container may take seconds, while a VM may take minutes.

✅ 6. What are Docker volumes and why are they used?
Answer:
Docker volumes are used to persist data generated by containers. Without volumes, data is lost when the container is deleted. Volumes are stored outside the container filesystem.
Example: docker run -v myvolume:/data mounts a volume to /data in the container.

✅ 7. How do you handle environment variables in Docker?
Answer:
Environment variables can be passed to containers using the -e flag or .env file in Docker Compose. They are useful for configuration like DB credentials, ports, etc.
Example: docker run -e ENV=prod myapp

✅ 8. What is a multi-stage build in Docker?
Answer:
Multi-stage builds allow you to use multiple FROM instructions in a Dockerfile to reduce the final image size. It helps separate the build environment from the production image.
Example:

FROM maven as builder
WORKDIR /app
COPY . .
RUN mvn clean package
FROM openjdk:17
COPY --from=builder /app/target/app.jar app.jar
CMD ["java", "-jar", "app.jar"]

✅ 13. What are the main components of Docker architecture?
Answer:
Docker architecture includes the Docker Engine, which has three components:
Docker Daemon (dockerd): Runs on the host machine and manages containers.
Docker CLI: Command-line interface to interact with the daemon.
Docker Registry: Stores Docker images (e.g., Docker Hub).
Example: When you run docker run nginx, the CLI tells the daemon to fetch the nginx image and run a container.

✅ 14. What is the purpose of the ENTRYPOINT and CMD instructions in a Dockerfile?
Answer:
Both define the command to run when a container starts.
CMD provides default arguments.
ENTRYPOINT sets the main command that always runs.
You can override CMD at runtime, but not ENTRYPOINT.
Example:

dockerfile
ENTRYPOINT ["java", "-jar"]
CMD ["app.jar"]

✅ 15. What is the difference between COPY and ADD in Dockerfile?
Answer:
Both are used to copy files, but:
COPY simply copies files/directories from the build context.
ADD can also handle remote URLs and unpack tar files.
For most use cases, COPY is preferred as it's more explicit.
Example:

dockerfile
COPY target/app.jar /app.jar

✅ 16. How do you list running and stopped containers?
Answer:
Use docker ps to list running containers. To see all (including stopped), use docker ps -a.
Example:
docker ps       # running containers
docker ps -a    # all containers
Stopped containers are shown with Exited status.

✅ 17. How do you delete a Docker container and image?
Answer:

To remove a container: docker rm <container_id>
To remove an image: docker rmi <image_id>

Use -f to force removal if needed.
Example:

docker rm mycontainer
docker rmi myimage
✅ 18. How do you expose a port in Docker?
Answer:
Use the -p or --publish flag when running a container. The format is hostPort:containerPort.
Example: docker run -p 8080:80 nginx
This maps port 8080 on the host to port 80 inside the container.

✅ 19. What is the purpose of .dockerignore file?
Answer:
.dockerignore excludes files and directories from being sent to the Docker daemon during image build. It works like .gitignore and helps reduce image size and build time.
Example: Add target/, .git/, and *.log to .dockerignore.

✅ 20. Can you run multiple processes in a single Docker container?
Answer:
Yes, but it’s not recommended. A container should ideally run a single process (Unix philosophy). For multiple processes, use process managers (e.g., supervisord) or separate containers with Docker Compose.
Best Practice: One process per container (e.g., app in one, DB in another).


✅ 21. What are Docker namespaces and how do they work?
Answer:
Namespaces provide isolation in Docker. Each container gets its own namespace for resources like process IDs (PID), network, mount, and users.
This ensures containers don’t interfere with each other or the host.
Example: A container has its own process tree and IP address, separate from others.

✅ 22. What is the purpose of Docker networking?
Answer:
Docker networking allows containers to communicate with each other and with external systems. It supports bridge, host, none, and overlay networks.
Example: In bridge mode, containers can communicate using container names (via DNS).
Use docker network create to define custom networks.

✅ 23. What is a bind mount in Docker?
Answer:
A bind mount lets you mount a file or directory from the host into a container. It allows real-time file sharing between the host and the container.
Example:

bash
Copy
Edit
docker run -v /host/data:/container/data myapp
Useful in development to test changes live.

✅ 24. What is the difference between a volume and a bind mount?
Answer:

Volume: Managed by Docker, stored in Docker’s storage (/var/lib/docker).

Bind Mount: Points to a host path.
Volumes are preferred for portability and isolation; bind mounts offer more control.
Example: Use volumes in production, bind mounts in development.

✅ 25. How do you optimize Docker images?
Answer:

Use small base images (e.g., alpine)

Minimize layers

Combine commands using &&

Clean temp files in the same layer

Use multi-stage builds to separate build-time and runtime
Example: Replace openjdk:17 with openjdk:17-alpine for a smaller image.

✅ 26. What is Docker Hub?
Answer:
Docker Hub is a cloud-based registry where Docker images are stored, shared, and managed. It hosts official and custom images.
Example: You can pull docker pull mysql to download the official MySQL image from Docker Hub.

✅ 27. What is the default network created by Docker?
Answer:
When Docker is installed, it creates:

bridge: default for containers

none: no network

host: shares host network
Bridge is the default network mode for user-defined containers.
Example: Containers on the same bridge can ping each other using container names.

✅ 28. How does Docker ensure container security?
Answer:
Docker uses kernel features like namespaces and cgroups for isolation. Containers run as non-root by default (recommended).
You can also scan images for vulnerabilities, use signed images, and limit privileges using seccomp, AppArmor, or SELinux.
Best Practice: Always run minimal images and avoid root containers.

✅ 29. What is Docker Swarm?
Answer:
Docker Swarm is Docker’s native clustering and orchestration tool. It allows you to manage a cluster of Docker engines as a single virtual host.
You can deploy services, scale containers, and perform rolling updates.
Example: docker swarm init to create a swarm manager.

✅ 30. What is the difference between Docker and Kubernetes?
Answer:

Docker: Containerization platform

Kubernetes: Container orchestration platform
Docker creates and manages containers; Kubernetes deploys, scales, and manages them across clusters.
Example: Use Docker to build and run containers, Kubernetes to run them in a distributed environment.