ðŸ”¹ What is @Transactional?
@Transactional is a Spring annotation used to manage database transactions automatically.
It ensures that a group of database operations either all succeed or all fail â€” this is known as the Atomicity property of transactions.

ðŸ”¹ Why it was introduced

Before @Transactional, developers had to manage transactions manually â€”
opening a connection, committing, or rolling back using JDBC code.
This made code long, repetitive, and error-prone.
Spring introduced @Transactional to handle transactions declaratively, meaning you just mark the method, and Spring takes care of:
Beginning the transaction
Committing if successful
Rolling back if an exception occurs

ðŸ”¹ How it works
When a method marked with @Transactional is called:
Spring creates a proxy around that method.
It starts a transaction before executing it.
If the method runs successfully â†’ Spring commits the transaction.
If it throws a runtime exception â†’ Spring rolls back the transaction automatically.

It works on the ACID principle:
Atomicity â€“ all operations succeed or fail as a unit.
Consistency â€“ moves database from one valid state to another.
Isolation â€“ transactions donâ€™t interfere with each other.
Durability â€“ committed changes are permanent.