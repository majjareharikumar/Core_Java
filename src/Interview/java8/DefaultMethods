A default method in an interface is defined using the default keyword and can contain a method body.
It allows developers to add new methods to existing interfaces without breaking existing implementations.
Classes that implement the interface can either use the default implementation or override it.
It helps in interface evolution (especially in large frameworks like Java Collections).
Default methods support multiple inheritance of behavior, unlike abstract classes.
If a class implements two interfaces with the same default method, it must override it to resolve the conflict.

Code Example:
interface A {
    default void show() {
        System.out.println("Interface A show()");
    }
}

interface B {
    default void show() {
        System.out.println("Interface B show()");
    }
}

class C implements A, B {
    // Must override show() to resolve conflict
    @Override
    public void show() {
        System.out.println("Resolving conflict...");
        A.super.show();  // Optionally, call A's version
        B.super.show();  // Optionally, call B's version
    }
}

public class Main {
    public static void main(String[] args) {
        C obj = new C();
        obj.show();
    }
}