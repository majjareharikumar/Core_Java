 Project: Customer Chase Relationship Microservices

 Overview:
 The Customer Chase Relationship project is a Spring Boot microservices-based suite designed to facilitate client needs in managing customer-to-account and account-to-customer relationship information. It exposes APIs providing operations such as retrieving customer-linked accounts and identifying related customers for a given account. This microservice operates as a Level 4 service, reading and maintaining data from a local datastore for faster response and reduced dependency on external systems.

What is “Account Relationship” here?

In banking and financial systems, a customer can have multiple accounts (savings, checking, loans, credit cards), and an account can be linked to multiple customers (like joint accounts, authorized users, or business accounts with multiple owners).

In your Customer Chase Relationship microservices project:

✅ Customer-to-Account Relationship
– Identifies all accounts linked to a given customer.
– Example: For customerId = 123, return all accountIds where this customer is the owner, joint holder, or authorized user.

✅ Account-to-Customer Relationship
– Identifies all customers linked to a given account.
– Example: For accountId = 456, return all customerIds who are owners, joint holders, or authorized users on this account.


 Key Features:

 Accounts API: Fetches all accounts linked to a specific customer (Customer to Account Relationship).

 Related Customers API: Retrieves all customers linked to a specific account (Account to Customer Relationship).


 Business Value:
 This service aligns with Photon target architecture, aiming to eliminate channel dependency on downstream systems during processing interruptions, ensuring high availability and resilience for client-facing channels.


Your Role (What you will tell in the interview)

> “In this project, I worked as a Java backend developer, responsible for developing and maintaining RESTful APIs using Spring Boot for customer-to-account and account-to-customer relationship services. I implemented service layer logic, integrated with the local datastore using Spring Data JPA, and ensured proper exception handling and logging. I also wrote unit and integration tests using JUnit and Mockito and supported containerization using Docker for consistent deployment across environments.”


Tech Stack

Backend: Java 17, Spring Boot, Spring Data JPA, Spring Web

Database: H2/PostgreSQL (for local datastore)

Build & Dependency: Maven

Containerization: Docker

Version Control: Git

Testing: JUnit, Mockito

Logging: SLF4J, Logback

(Optional) Kafka (if asked about asynchronous events)

APIs Developed

✅ GET /customers/{customerId}/accounts – Fetch all accounts linked to a customer.
✅ GET /accounts/{accountId}/customers – Retrieve all customers linked to a specific account.

Both APIs return JSON responses with clear relationship mapping and handle pagination for large data.

 Challenges Faced & Solutions

✅ Challenge 1: Handling high response time during large data fetch.
Solution: Implemented pagination and indexed frequently queried columns in the database to optimize queries.

✅ Challenge 2: Ensuring data consistency while updating customer-account relationships.
Solution: Used transaction management in Spring and implemented optimistic locking where necessary to avoid conflicts.

✅ Challenge 3: Maintaining channel independence during downstream failures.
Solution: Implemented caching mechanisms and fallback strategies to serve data from the local datastore if downstream systems were unavailable, following Photon architecture guidelines.

Sample Scenario to Explain in Interview

> “For example, when a client requests all accounts linked to a customer, the API receives the customerId, validates it, queries the local datastore using Spring Data JPA, and returns a JSON list of accounts with details like accountId, accountType, and status. Similarly, if an account ID is provided, the related customers linked to that account are retrieved and sent back in the response, helping the channel applications avoid directly querying the downstream systems, especially during system outages.”

Why is this important in your project?

✅ Enables channel applications (mobile app, online banking) to quickly display all accounts for a customer or all customers for an account without directly calling downstream systems each time.
✅ Supports KYC, fraud checks, and authorization validation.
✅ Helps maintain consistent, high-speed data access during system outages by using your local datastore.