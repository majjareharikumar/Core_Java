Q1. What is Spring Data JPA?
Spring Data JPA is a part of the Spring Data project that simplifies data access using JPA (Java Persistence API).
It provides repository interfaces to perform CRUD and custom queries without writing boilerplate code.
Spring Data JPA automatically implements these interfaces based on method names.
It integrates easily with Hibernate and other JPA providers.
It also supports pagination, sorting, projections, and dynamic queries.
Overall, it reduces the amount of code required for database interaction.

Q2. What is the difference between JPA and Spring Data JPA?
JPA is a Java specification for ORM that defines how to persist data in Java applications.
It provides APIs and annotations but needs manual implementation of repositories and queries.
Spring Data JPA builds on top of JPA and automates repository creation using interfaces.
It also provides powerful query generation, pagination, and auditing features.
JPA is the foundation, while Spring Data JPA adds abstraction and ease of use.
Spring Data JPA makes working with databases faster and more developer-friendly.

Q3. What is a Repository in Spring Data JPA?
A Repository is an interface in Spring Data JPA used to perform database operations.
You can extend one of its base interfaces like CrudRepository, JpaRepository, or PagingAndSortingRepository.
Spring automatically provides implementations at runtime.
Repositories allow methods like findById, save, delete, and custom queries like findByName.
You don't need to write any SQL or JPQL for simple operations.
Repositories are the core abstraction in Spring Data JPA.

Q4. What is JpaRepository and what are its benefits?
JpaRepository is a JPA-specific extension of PagingAndSortingRepository.
It provides additional methods like flush(), saveAll(), deleteInBatch(), and batch operations.
It includes all CRUD and pagination methods by default.
By extending JpaRepository, you get rich functionality with minimal code.
It’s commonly used in Spring Boot apps for clean and efficient data access.
Choose JpaRepository for most use cases over CrudRepository.

Q5. How are custom queries written in Spring Data JPA?
Custom queries can be written using method name conventions like findByEmail(), findByNameAndAge().
For complex queries, use the @Query annotation with JPQL or native SQL.
Example:
@Query("SELECT u FROM User u WHERE u.status = ?1")
List<User> findByStatus(String status);
You can also use @Modifying for update/delete operations.
Custom queries provide flexibility when method names are not enough.

Q6. What is the difference between @Query and derived query methods?
Derived queries are built using method names like findByName() or findByAgeGreaterThan().
Spring parses the method name and generates the JPQL query automatically.
@Query allows writing custom JPQL or native SQL for more complex queries.
Use @Query when method names become too long or unclear.
Both approaches help avoid writing DAO implementation code manually.
They can also be combined with pagination and sorting.

Q7. What is the use of @Modifying annotation in Spring Data JPA?
@Modifying is used with @Query to perform update or delete operations.
It tells Spring Data that the query modifies data instead of selecting it.
You must also annotate the method with @Transactional to ensure commit.
Example:

java
Copy
Edit
@Modifying
@Query("DELETE FROM User u WHERE u.status = ?1")
void deleteByStatus(String status);
Without @Modifying, Spring will throw an error for such queries.

Q8. What is the purpose of @Transactional in Spring Data JPA?
@Transactional defines the scope of a database transaction.
Spring wraps the method call in a transaction, ensuring all operations either succeed or fail together.
In Spring Data JPA, CRUD methods are transactional by default.
You can explicitly use @Transactional(readOnly = true) for read operations.
For custom update/delete queries, use @Transactional to commit changes.
It helps maintain data consistency and integrity.

Q9. How does pagination work in Spring Data JPA?
Spring Data JPA supports pagination using Pageable and Page interfaces.
You pass a Pageable object to a repository method, and it returns a Page of data.
Example:
Page<User> findByStatus(String status, Pageable pageable);
You can sort and control page size, number, and order.
Useful for large datasets and performance optimization.
Spring Boot auto-generates paging info in REST responses if using Spring Data REST.

Q10. What is the difference between Page and Slice in Spring Data JPA?
Page returns total number of pages, elements, and allows navigating back and forth.
Slice returns only the data for the requested slice and if there is a next slice.
Page is heavier but gives full paging info; Slice is lighter and more performant for simple use cases.
Use Slice when total count is not required, like infinite scrolling.
Both are used with the Pageable parameter.
Choose based on your data navigation needs.

Q11. What is the use of @Entity annotation?
The @Entity annotation marks a class as a JPA entity, meaning it maps to a table in the database.
Each field in the class corresponds to a column unless marked otherwise.
The class must have a no-arg constructor and a primary key annotated with @Id.
It is mandatory for JPA to recognize the class as a persistent entity.
Example:
@Entity
public class User { ... }
This is the core building block of JPA-based persistence.

Q12. What is the role of @Id and @GeneratedValue?
@Id marks the primary key field in an entity.
@GeneratedValue defines how the primary key is auto-generated (e.g., AUTO, IDENTITY, SEQUENCE).
It’s commonly used with databases that support auto-incremented primary keys.
Example:
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
This helps in uniquely identifying each entity instance.

Q13. What is the use of @ManyToOne, @OneToMany, and @OneToOne?
These annotations define relationships between JPA entities:
@ManyToOne: Many records in one table relate to one record in another.
@OneToMany: One record relates to many in another table (usually mapped by mappedBy).
@OneToOne: One record relates to exactly one in another table.
They help model foreign key associations.
They are used with @JoinColumn, mappedBy, and cascade settings.

Q14. What is Lazy vs Eager loading in JPA?
Lazy loading (FetchType.LAZY) delays fetching related entities until they’re accessed.
Eager loading (FetchType.EAGER) fetches related entities immediately with the main entity.
Lazy loading improves performance when related data isn’t always needed.
Eager loading can lead to unnecessary joins and data fetching.
Use lazy as default and override with eager only when needed.
It’s important for optimizing performance in large datasets.

Q15. What is the use of @JoinColumn in JPA?
@JoinColumn is used in relationships (e.g., @ManyToOne) to define the foreign key column.
It specifies the name of the column in the child table that joins with the parent.
Example:
@ManyToOne
@JoinColumn(name = "user_id")
private User user;
Without it, JPA will generate a default column name.
It gives more control over schema design and naming.

Q16. What is the difference between save(), saveAll(), and saveAndFlush()?
save(entity): Saves a single entity and returns the saved instance.
saveAll(entities): Saves a list of entities in batch.
saveAndFlush(entity): Saves the entity and immediately flushes changes to the database.
Flushing means syncing the persistence context with the database.
Use saveAndFlush() when you need to force an immediate write, especially before executing a native query.
In general, save() and saveAll() are sufficient for most use cases.

Q17. What is the difference between findById() and getOne()?
findById(id) returns an Optional and immediately queries the database.
getOne(id) (deprecated) returns a proxy and fetches the data lazily when accessed.
Using getOne() outside of a transactional context causes LazyInitializationException.
findById() is safer and preferred in modern codebases.
In Spring Boot 2.5+, getById() replaces getOne().
Always wrap lazy calls in a @Transactional method if used.

Q18. What is the difference between native SQL and JPQL in Spring Data JPA?
JPQL (Java Persistence Query Language) is object-oriented and works with entity classes and fields.
Native SQL works directly with database tables and column names.
JPQL is database-independent, while native SQL is database-specific.
JPQL is preferred for portability and integration with entities.
Use native SQL when complex queries require database-specific features.
Both can be used with the @Query annotation.

Q19. What is optimistic and pessimistic locking in JPA?
Optimistic Locking: Uses a version column (@Version) to detect conflicts during concurrent updates.
If two users update the same record, the second update fails with an exception.

Pesimistic Locking: Locks the row in the database using SQL SELECT FOR UPDATE.
It prevents other transactions from modifying or reading the data until released.
Optimistic is non-blocking and better for high-concurrency environments.
Pessimistic is safer in critical update scenarios.

Q20. What are projections in Spring Data JPA?
Projections allow selecting specific fields instead of entire entities.
There are two types: Interface-based and DTO-based projections.
Interface projections use getter methods to map results; DTOs use constructors.
Example:
interface UserView { String getName(); }
List<UserView> findByStatus(String status);
Projections improve performance by avoiding unnecessary data fetch.
Useful in read-heavy or RESTful API applications.

Q25. What is cascading in JPA and how does it work?
Cascading in JPA controls how entity state transitions (e.g., persist, merge, delete) are applied to related entities.
You configure it using the cascade attribute in relationship annotations.
Example:

@OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
private List<Order> orders;
When the parent is persisted or removed, the same is applied to child entities.
Common cascade types: PERSIST, MERGE, REMOVE, ALL.
Be careful with REMOVE to avoid accidental deletions.

Q26. What is the use of JpaSpecificationExecutor in Spring Data JPA?
JpaSpecificationExecutor is an interface that allows execution of JPA Criteria API queries using Specification<T>.
You add it to your repository to enable dynamic query construction.
It provides methods like findAll(Specification spec) and count(Specification spec).
Used heavily in complex filtering scenarios like search pages or advanced filtering.
Combining multiple specs is easy using .and(), .or(), etc.
It keeps your query logic clean and reusable.

Q27. What is @NamedQuery in JPA? Is it used in Spring Data JPA?
@NamedQuery defines a static JPQL query with a name, usually placed at the entity level.
It can be reused across the application without rewriting the query string.
Example:
@NamedQuery(name = "User.findActive", query = "SELECT u FROM User u WHERE u.status = 'ACTIVE'")
Spring Data JPA can use it via method name matching or by explicitly referring to it.
However, many prefer @Query for flexibility and better readability.
Still useful for legacy or highly optimized queries.

Q28. Can you define custom methods in Spring Data JPA repository?
Yes, you can define custom methods in your repository and implement them separately.
You create a custom interface (e.g., UserRepositoryCustom) and its implementation.
Then, extend this custom interface in your main repository.
Spring will automatically recognize and wire the custom implementation.
This is useful for complex queries or batch processing logic not handled by derived methods.
Keeps business logic separate from simple CRUD.

Q29. How do you handle NoResultException or empty results in Spring Data JPA?
Spring Data JPA returns an Optional<T> for findById() to avoid NoResultException.
For collections, it returns an empty list if no data is found.
For single result custom queries, you can return Optional<T> or use exception handling.
Avoid returning null—Spring encourages safe handling through Optional.
This approach reduces the risk of NullPointerException.
Design your methods with return types that align with result expectations.

Q30. What is flush() and clear() in JPA EntityManager, and when are they used?
flush(): Forces pending changes in the persistence context to be written to the database.
clear(): Detaches all managed entities from the persistence context (like a reset).
They are used in batch processing or performance tuning to avoid memory bloat.
Spring Data JPA allows calling these directly using EntityManager.
Example:
entityManager.flush();
entityManager.clear();
Use with caution—they affect the persistence context directly.

