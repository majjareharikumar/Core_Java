Q1. What is Spring Boot and why is it used?
Spring Boot is a framework built on top of Spring to simplify application development.
It provides auto-configuration, which automatically sets up Spring application based on dependencies.
It eliminates much of the boilerplate configuration needed in traditional Spring apps.
Spring Boot also includes an embedded server like Tomcat or Jetty, allowing standalone apps.
It supports production-ready features like metrics, health checks, and externalized configuration.
Overall, Spring Boot accelerates development and deployment of Spring applications.

Q2. What is the role of the @SpringBootApplication annotation?
@SpringBootApplication is a convenience annotation that combines three annotations:
@Configuration (defines configuration class), @EnableAutoConfiguration (enables Spring Boot’s auto-configuration), and @ComponentScan (scans packages for components).
It marks the main class of a Spring Boot application.
By using it, you avoid manually adding all three annotations.
It triggers Spring Boot’s auto-setup and component scanning.
This annotation is the entry point for launching a Spring Boot app.

Q3. What is auto-configuration in Spring Boot?
Auto-configuration is a feature where Spring Boot automatically configures beans based on classpath settings, properties, and other conditions.
For example, if spring-boot-starter-web is present, Spring Boot configures a DispatcherServlet and embedded Tomcat.
It reduces manual bean declarations and XML or Java config.
Developers can override defaults by defining their own beans or properties.
Auto-configuration classes are loaded conditionally using @Conditional annotations.
It helps to quickly get started without deep Spring setup knowledge.

Q4. What is Spring Boot Starter?
A Starter is a convenient dependency descriptor that aggregates commonly used dependencies.
For example, spring-boot-starter-web includes Spring MVC, Jackson, and embedded Tomcat dependencies.
Starters simplify dependency management by avoiding you to specify each dependency separately.
They also ensure compatible versions of dependencies are used together.
Spring Boot provides many starters for web, data, security, testing, etc.
Using starters helps speed up development and maintain consistency.

Q5. How can you externalize configuration in Spring Boot?
Spring Boot supports externalized configuration through files like application.properties or application.yml.
You can specify environment-specific properties for different profiles (e.g., application-dev.properties).
It also supports environment variables, command-line arguments, and property sources.
You can inject property values using @Value or bind them to POJOs using @ConfigurationProperties.
This allows flexible configuration without changing code.
It supports 12-factor app principles for modern cloud-native apps.

Q6. What is Spring Boot Actuator and its use?
Spring Boot Actuator provides production-ready features to monitor and manage applications.
It exposes endpoints to check application health, metrics, environment properties, and more.
Examples of endpoints include /actuator/health, /actuator/metrics, and /actuator/env.
Actuator integrates with monitoring tools like Prometheus and Grafana.
It helps developers and operations teams gain insights into running applications.
You enable it by adding the spring-boot-starter-actuator dependency.

Q7. How do you create a Spring Boot application?
You can create a Spring Boot app using Spring Initializr (web tool) or IDE plugins.
Specify dependencies like spring-boot-starter-web or spring-boot-starter-data-jpa.
Create a main class annotated with @SpringBootApplication.
Run the application with SpringApplication.run() method in the main method.
Spring Boot auto-configures components and starts the embedded server.
This setup reduces boilerplate and configuration effort.

Q8. What are Spring Boot Profiles?
Profiles allow you to maintain environment-specific configurations like dev, test, and prod.
You can define separate property files, e.g., application-dev.properties.
Activate a profile via command line, environment variable, or programmatically.
Spring Boot loads configuration properties based on the active profile.
Profiles help manage different settings like database URLs or logging levels.
They support seamless deployment across environments.

Q9. How can you package a Spring Boot application?
Spring Boot applications can be packaged as executable JARs or WARs.
Executable JARs include embedded servers, enabling standalone deployment.
You use Maven or Gradle plugins (spring-boot-maven-plugin) to create the package.
WAR files are deployed to external servlet containers if required.
Packaging creates a runnable artifact containing all dependencies.
This simplifies deployment and environment setup.

Q10. What is the difference between Spring Boot and Spring MVC?
Spring MVC is a web framework for building web applications with request handling and view rendering.
Spring Boot is a framework on top of Spring that simplifies app setup and configuration.
Spring Boot includes auto-configuration, embedded servers, starters, and monitoring.
Spring MVC requires manual setup, while Spring Boot is opinionated to reduce config.
You can use Spring MVC inside Spring Boot applications for web features.
Spring Boot accelerates development and production readiness.

Q11. What is the purpose of spring-boot-devtools?
spring-boot-devtools is a development utility that enhances the developer experience.
It provides features like automatic restart when code changes, live reload of static resources, and improved logging.
This module speeds up development by eliminating manual restarts.
It also disables template caching to reflect view changes instantly.
Devtools should not be included in production deployments.
Adding it is as simple as including the dependency in your build file.

Q12. How do you handle exceptions in Spring Boot?
Spring Boot supports centralized exception handling using @ControllerAdvice and @ExceptionHandler.
@ControllerAdvice allows you to define global exception handlers for multiple controllers.
You can return custom error responses with meaningful messages and HTTP status codes.
Spring Boot also provides a default error page and error JSON response via BasicErrorController.
You can customize error handling by creating a bean implementing ErrorController.
This approach improves error management and user experience.

Q13. What is the difference between @RestController and @Controller in Spring Boot?
@Controller is used to mark a class as a Spring MVC controller returning views (like JSP, Thymeleaf).
@RestController is a specialized version combining @Controller and @ResponseBody.
It simplifies creating RESTful APIs by automatically serializing responses to JSON or XML.
You don't need to annotate each method with @ResponseBody.
@RestController is typically used in REST API development.
It reduces boilerplate and makes API controllers concise.

Q14. How does Spring Boot support embedded servers?
Spring Boot includes embedded servlet containers like Tomcat, Jetty, and Undertow.
By default, the embedded Tomcat server is used when you add spring-boot-starter-web.
This allows you to run applications as standalone JARs without deploying WAR files.
Embedded servers simplify deployment and testing by bundling the server with the app.
You can configure server properties like port and context path via properties files.
This feature reduces infrastructure setup complexity.

Q15. What is the use of @EnableAutoConfiguration annotation in Spring Boot?
@EnableAutoConfiguration tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
It activates the auto-configuration feature that configures components automatically.
This annotation is usually combined within @SpringBootApplication.
It reduces manual bean registration and boilerplate configuration.
Spring Boot scans the dependencies and sets up required infrastructure automatically.
This makes development faster and easier.

Q16. What is the difference between application.properties and application.yml in Spring Boot?
Both are used for externalized configuration in Spring Boot.
application.properties uses key-value pairs (key=value), while application.yml uses YAML format with indentation.
YAML is more readable and supports hierarchical data better, making it easier for complex configs.
Properties files are simpler and widely used, especially for flat configurations.
Spring Boot supports both formats interchangeably.
You can choose based on preference or project complexity.

Q17. How do you customize the embedded Tomcat server in Spring Boot?
You can customize embedded Tomcat settings via application.properties (e.g., server.port, server.servlet.context-path).
For advanced configuration, implement a TomcatServletWebServerFactory bean and override its methods.
You can configure connectors, SSL, session timeout, max threads, and more.
This customization allows fine-tuning performance and security.
Spring Boot makes it easy to tailor the embedded server without external server installation.
This flexibility suits various deployment scenarios.

Q18. How does Spring Boot support caching?
Spring Boot supports caching abstraction via @EnableCaching.
You can annotate methods with @Cacheable, @CachePut, and @CacheEvict to control caching behavior.
It supports multiple cache providers like EhCache, Hazelcast, Redis, and caffeine.
Caching improves performance by storing method results and avoiding repetitive computation or database calls.
Spring Boot auto-configures caching based on available dependencies.
This abstraction simplifies integrating caching into applications.

Q19. What is the purpose of the spring-boot-starter-parent?
spring-boot-starter-parent is a special starter POM that provides default configurations for Maven builds.
It manages dependency versions to ensure compatibility and reduce version conflicts.
It configures plugin defaults for compiling, testing, and packaging.
Using it reduces the need for manual configuration in your pom.xml.
It acts as a parent POM for Spring Boot applications built with Maven.
This helps maintain consistent builds across projects.

Q20. How do you enable HTTPS in a Spring Boot application?
To enable HTTPS, you need to configure the embedded server with an SSL certificate.
Set properties like server.ssl.key-store, server.ssl.key-store-password, and server.port in application.properties.
You can use a JKS or PKCS12 keystore containing your certificate and private key.
Spring Boot will configure the embedded server to accept HTTPS traffic on the specified port.
This secures communication by encrypting data between client and server.
You may also redirect HTTP to HTTPS via additional configuration.

Q21. What is Spring Boot CLI and how is it used?
Spring Boot CLI (Command Line Interface) is a tool to quickly develop Spring Boot applications using Groovy scripts.
It allows running Groovy scripts without compiling, speeding up prototyping.
You can write concise code with less boilerplate compared to Java.
CLI supports commands like spring run, spring init, and spring test.
It’s useful for rapid development, experimentation, and testing.
You can install it separately and use it from the terminal.

Q22. How does Spring Boot handle logging?
Spring Boot uses Commons Logging for internal logging and defaults to Logback as the logging implementation.
You can configure logging levels and patterns in application.properties or application.yml.
It supports popular logging frameworks like Log4j2, JUL, and SLF4J.
Logging can be customized per package or class for fine-grained control.
Spring Boot also supports external configuration of log files and rotation policies.
This flexible logging setup helps in debugging and monitoring.

Q23. What is the role of CommandLineRunner and ApplicationRunner interfaces in Spring Boot?
Both interfaces provide a way to run code after the Spring Boot application starts.
Implement CommandLineRunner to execute code with raw command-line arguments.
ApplicationRunner receives a structured ApplicationArguments object for easier argument parsing.
These are useful for initialization tasks, data loading, or running scripts.
Beans implementing these interfaces are automatically executed at startup.
They help perform tasks before the application begins handling requests.

Q24. What is Spring Boot DevTools and how does it help development?
Spring Boot DevTools enhances the development process by providing automatic restarts and live reloads.
It detects code or resource changes and restarts the application quickly.
This reduces the manual effort of restarting the server during development.
It also disables template caching for faster view updates.
DevTools includes remote debugging and global property support.
It’s designed only for development and should be excluded from production.

Q25. How can you implement pagination in Spring Boot applications?
Pagination is supported by Spring Data repositories with Pageable and Page interfaces.
You pass a Pageable object to repository methods to fetch a subset of data with page number and size.
The returned Page object contains the content, total pages, and total elements.
Spring Boot automatically maps query parameters like page and size in REST controllers.
Pagination improves performance by limiting large data loads.
It also enhances user experience by loading manageable data chunks.

Q26. How do you secure a Spring Boot application?
You can secure Spring Boot apps using Spring Security, which provides authentication and authorization features.
Add the spring-boot-starter-security dependency to enable security defaults.
By default, it secures all endpoints with basic authentication.
You can customize security via WebSecurityConfigurerAdapter or newer SecurityFilterChain beans.
Support for OAuth2, JWT, LDAP, and more is available.
Spring Security integrates with Spring Boot seamlessly to protect apps from unauthorized access.

Q27. What is the role of @SpringBootTest annotation?
@SpringBootTest is used for integration testing in Spring Boot applications.
It loads the full application context to test how components work together.
You can run tests with a real or mocked environment.
It supports configuring properties, web environment, and specific test slices.
This annotation is used with testing frameworks like JUnit or TestNG.
It helps ensure that the entire Spring Boot app behaves as expected.

Q28. How do you configure database connection in Spring Boot?
You configure databases via application.properties or application.yml files.
Typical properties include spring.datasource.url, username, password, and driver-class-name.
Spring Boot auto-configures a DataSource bean based on these properties.
It also supports connection pooling with HikariCP by default.
You can configure JPA properties, Hibernate dialect, and DDL auto modes as well.
This makes connecting and working with databases straightforward.

Q29. What is Spring Boot Starter Test?
spring-boot-starter-test is a starter that bundles common testing dependencies.
It includes JUnit, Mockito, Hamcrest, AssertJ, Spring TestContext Framework, and others.
It simplifies adding all required testing libraries with a single dependency.
It supports unit, integration, and web testing.
This starter encourages writing tests to improve code quality and reliability.
Spring Boot configures testing utilities out of the box.

Q30. How does Spring Boot support RESTful web services?
Spring Boot simplifies building REST APIs using @RestController and @RequestMapping.
It automatically configures Jackson for JSON serialization and deserialization.
You can handle HTTP methods like GET, POST, PUT, DELETE easily.
Error handling can be centralized using @ControllerAdvice.
Spring Boot supports validation, content negotiation, and HATEOAS integration.
It reduces setup time for RESTful services with embedded servers and auto-config.

Q31. What is Spring Boot Actuator’s health check and how is it used?
Spring Boot Actuator provides health check endpoints to monitor application status.
The /actuator/health endpoint returns information about app health, including database connectivity and disk space.
You can customize health indicators or add your own by implementing HealthIndicator.
Health checks help operations teams detect problems early and ensure reliability.
Actuator can be integrated with monitoring systems for alerts and dashboards.
It’s essential for production-grade applications.

Q32. What is the use of @ConditionalOnProperty in Spring Boot?
@ConditionalOnProperty controls bean creation based on specific configuration properties.
You can enable or disable beans by setting properties in application.properties.
This helps in feature toggling and environment-specific configurations.
If the specified property is missing or false, the bean won’t be created.
It improves flexibility and modularity in app design.
Often used in auto-configuration classes to conditionally enable features.

Q33. How do you implement file upload in Spring Boot?
Spring Boot supports file upload using MultipartFile in controller methods.
You annotate the method parameter with @RequestParam("file") MultipartFile file.
Files can be saved to disk, database, or cloud storage.
Multipart support is enabled by default with spring-boot-starter-web.
You can configure max file size limits via properties.
File upload handling is simple and integrates with REST APIs smoothly.

Q34. What is the use of @ConfigurationProperties in Spring Boot?
@ConfigurationProperties binds external configuration properties to POJOs.
It allows grouping related properties under a prefix for cleaner code.
Properties can be in .properties or .yml files.
It supports type-safe configuration and validation.
This makes configuration management easier and less error-prone.
Often used for complex configurations like database, mail, or custom services.

Q35. How do you implement scheduled tasks in Spring Boot?
Spring Boot supports scheduling tasks using @EnableScheduling and @Scheduled annotations.
@Scheduled methods can run at fixed delays, fixed rates, or cron expressions.
This is useful for periodic jobs like cleanup, notifications, or batch processing.
Scheduling is managed by Spring’s TaskScheduler behind the scenes.
You can configure thread pools for concurrent execution.
It’s a simple way to automate recurring tasks in applications.

Q36. How does Spring Boot support Microservices architecture?
Spring Boot simplifies building microservices by providing standalone, production-ready applications.
It supports REST APIs, embedded servers, and externalized configuration essential for microservices.
Spring Cloud integrates with Spring Boot to offer features like service discovery (Eureka), configuration management, and load balancing.
Spring Boot’s quick startup time and lightweight nature fit well with microservices.
It also supports distributed tracing and fault tolerance through libraries like Sleuth and Hystrix.
This makes it a popular choice for scalable, modular systems.

Q37. What are Spring Boot Starters?
Starters are dependency descriptors that aggregate commonly used libraries for a specific functionality.
For example, spring-boot-starter-web includes Spring MVC, Jackson, and embedded Tomcat.
Starters simplify dependency management by reducing the need to specify multiple dependencies manually.
They ensure compatible versions are used together.
Starters improve productivity and reduce configuration errors.
They cover many areas like data, security, testing, batch, and more.

Q38. What is auto-configuration in Spring Boot?
Auto-configuration automatically configures Spring applications based on the dependencies found in the classpath.
It reduces the need for manual bean definitions and XML configurations.
Spring Boot scans your classpath and applies configuration classes conditionally.
Auto-configuration is enabled by @EnableAutoConfiguration inside @SpringBootApplication.
Developers can exclude specific auto-configurations if needed.
It makes starting projects fast and reduces boilerplate.

Q39. How does Spring Boot manage externalized configuration?
Spring Boot supports externalized configuration via properties files, YAML files, environment variables, and command-line arguments.
The order of precedence determines which configuration overrides others.
You can also use profiles to separate environment-specific configurations.
Configurations can be injected using @Value or @ConfigurationProperties.
This allows flexible and dynamic application setup without code changes.
It supports cloud-native and containerized deployment models.

Q40. What is the use of @SpringBootApplication annotation?
@SpringBootApplication is a convenience annotation that combines three annotations:
@Configuration (declares the class as a source of bean definitions),
@EnableAutoConfiguration (enables auto-configuration), and
@ComponentScan (scans for Spring components in the package).
It simplifies bootstrapping Spring Boot apps with a single annotation.
This annotation is placed on the main application class.
It is the entry point to start Spring Boot applications.

Q42. What is the difference between @Component, @Service, @Repository, and @Controller?
All are Spring stereotypes to mark classes as beans for component scanning.
@Component is a generic stereotype.
@Service indicates a service layer class holding business logic.
@Repository marks DAO or repository classes and adds exception translation for database errors.
@Controller is used for MVC controllers handling HTTP requests.
Using specific stereotypes improves clarity and allows Spring to apply relevant behavior.

Q43. How can you externalize configuration for different environments in Spring Boot?
Spring Boot supports profiles to separate configurations for environments like dev, test, and prod.
You create property files like application-dev.properties and application-prod.properties.
Set the active profile using spring.profiles.active in application.properties or environment variables.
Spring loads the profile-specific properties overriding defaults.
Profiles enable different database URLs, logging levels, or service endpoints per environment.
This allows smooth deployment across multiple stages.

Q44. What is the role of SpringApplication.run()?
SpringApplication.run() is the entry point to launch a Spring Boot application.
It bootstraps the Spring context, triggers auto-configuration, and starts the embedded server.
It takes the main application class and command-line arguments as parameters.
It manages the lifecycle of the application context.
This method sets up default behaviors and logging for your app.
All Spring Boot apps begin execution with this call.

Q45. How does Spring Boot support testing web applications?
Spring Boot provides testing annotations like @WebMvcTest to test controllers in isolation.
It auto-configures mock MVC environment to simulate HTTP requests and responses.
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT) runs tests with a real embedded server.
You can use TestRestTemplate or WebTestClient to perform integration tests.
Spring Boot testing starters include libraries like JUnit, Mockito, and AssertJ.
This comprehensive support simplifies testing web layers effectively.

Q46. What is Spring Boot Starter Parent and why is it used?
Spring Boot Starter Parent is a special Maven parent project that manages dependency versions and plugin configurations.
By inheriting from it, you get consistent versions of dependencies and build plugins, reducing version conflicts.
It simplifies project setup by providing default configurations for common Maven plugins.
Using Starter Parent ensures compatibility across Spring Boot dependencies.
It also allows overriding default versions when needed.
This promotes standardized and easier project management.

Q47. How do you handle exceptions globally in Spring Boot?
Spring Boot supports global exception handling via @ControllerAdvice.
You create a class annotated with @ControllerAdvice and define methods annotated with @ExceptionHandler for specific exceptions.
This centralizes error handling logic, improving code maintainability.
You can customize HTTP responses with proper status codes and error messages.
It works with REST controllers to return JSON or XML error responses.
Global exception handling improves user experience and debugging.

Q48. What is the difference between @SpringBootConfiguration and @Configuration?
@SpringBootConfiguration is a specialized form of @Configuration used internally by Spring Boot.
It indicates the main configuration class in Spring Boot applications.
@Configuration is a general annotation to define configuration classes in Spring Framework.
@SpringBootConfiguration adds Spring Boot specific behaviors like auto-configuration scanning.
For most use cases, you use @SpringBootApplication, which includes @SpringBootConfiguration.
This distinction helps Spring Boot identify its main config class.

Q49. How can you disable specific auto-configurations in Spring Boot?
You can disable auto-configurations using the exclude attribute of @SpringBootApplication or @EnableAutoConfiguration.
For example, @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class}) disables database auto-config.
This is useful if you want to provide your own custom configuration or avoid unwanted beans.
You can also disable auto-config via properties by setting spring.autoconfigure.exclude.
Disabling unnecessary auto-configurations can improve startup time and reduce resource usage.
It provides more control over application behavior.

Q50. What is Spring Boot’s approach to logging levels?
Spring Boot uses logging levels like TRACE, DEBUG, INFO, WARN, and ERROR to control logging verbosity.
You configure logging levels in application.properties using keys like logging.level.root or logging.level.<package>.
For example, logging.level.org.springframework=DEBUG enables debug logs for Spring classes.
You can change logging levels without code changes, aiding troubleshooting.
Spring Boot’s default is INFO level for most packages.
Fine-grained control helps optimize log output and performance.

Q51. What is the role of application.properties and application.yml in Spring Boot?
Both application.properties and application.yml are used for externalized configuration in Spring Boot.
They hold key-value pairs or hierarchical data to configure the application behavior.
application.properties uses a simple key=value format, while application.yml uses YAML syntax, which supports nesting.
Spring Boot automatically loads these files from the classpath at startup.
You can override properties via profiles or environment variables.
This flexibility allows centralized and environment-specific configurations.

Q52. What is the default embedded server used by Spring Boot? Can it be changed?
Spring Boot uses Tomcat as the default embedded servlet container.
This means you don’t need to deploy WAR files or install external servers.
You can change the embedded server by including dependencies for Jetty or Undertow.
Spring Boot auto-configures the server based on the classpath dependencies.
Switching servers is as simple as excluding Tomcat and adding Jetty or Undertow starters.
This flexibility supports different use cases and performance requirements.

Q53. How does Spring Boot handle dependency management?
Spring Boot manages dependencies through a parent POM and starter dependencies.
The parent POM defines consistent versions for a wide range of libraries, ensuring compatibility.
Starters group related dependencies for easier inclusion (e.g., spring-boot-starter-web).
This prevents version conflicts and reduces manual dependency management.
Developers can override versions if needed but benefit from a tested and stable set by default.
It streamlines development and dependency updates.

Q54. What is the importance of the META-INF/spring.factories file in Spring Boot?
The spring.factories file is used by Spring Boot’s auto-configuration mechanism.
It lists auto-configuration classes and other components that Spring Boot loads automatically.
This file is located in META-INF inside jar dependencies.
It enables the modular addition of features without manual configuration.
Developers can create custom auto-configurations by registering them in this file.
It is a key part of Spring Boot’s plug-and-play design.

Q55. Can you explain how Spring Boot supports configuration profiles?
Configuration profiles allow Spring Boot to load different configurations based on the active profile.
Profiles enable environment-specific settings like dev, test, or production.
You specify active profiles via spring.profiles.active property or environment variables.
Profile-specific property files are named application-{profile}.properties or .yml.
Spring merges profile-specific settings with the default configuration at runtime.
Profiles simplify deployment and testing across different environments.


