Q1. What is the Spring Framework?
Spring is a lightweight and open-source Java framework used to build enterprise-level applications.
It provides support for developing Java applications using features like dependency injection, aspect-oriented programming, and transaction management.
Spring helps in loosely coupled code through its Inversion of Control (IoC) container.
It supports integration with various technologies like Hibernate, JPA, JDBC, JMS, etc.
It promotes good software design practices like modularity and testability.
Spring Boot, a part of Spring, simplifies application development further.

Q2. What is Dependency Injection (DI) in Spring?
Dependency Injection is a design pattern where the dependencies (objects) are injected into a class instead of being created by the class.
In Spring, DI helps in achieving loose coupling between components.
There are two main types: Constructor Injection and Setter Injection.
Spring handles the creation and wiring of objects via the IoC container.
It makes the code easier to test, maintain, and extend.
DI is configured using XML, annotations, or Java-based configuration.

Q3. What is Inversion of Control (IoC)?
IoC is a design principle where the control of creating and managing objects is transferred from the program to the framework.
In Spring, IoC is implemented using the ApplicationContext or BeanFactory.
It promotes loose coupling and separation of concerns.
Developers define how beans should be created, and Spring manages their lifecycle.
This helps in writing modular, reusable, and testable code.
IoC is the core concept on which the entire Spring Framework is built.

Q4. What is a Spring Bean?
A Spring Bean is an object managed by the Spring IoC container.
It is created, wired, and managed by Spring based on the configuration.
Beans can be defined using XML, annotations like @Component, @Service, or Java config.
Each bean has a scope like Singleton, Prototype, Request, Session, etc.
Spring beans are reusable components that help in building modular applications.
The lifecycle of a bean includes instantiation, dependency injection, initialization, and destruction.

-->Different Methods to Create a Spring Bean
----------------------------------------------------
   Here we are going to discuss how to create a Spring Bean in 3 different ways as follows:
   Method 1: Creating Bean Inside an XML Configuration File (beans.xml) :- One of the most popular ways to create a spring bean is to define a bean in an XML configuration file something like this.
   <bean id="AnyUniqueId" class="YourClassName">
   </bean>

   Method 2: Using @Component Annotation:-
   @Component("collegeBean")
    // Class
   public class College {
   }
    Method 3: Using @Bean Annotation :- One of the most important annotations in spring is the @Bean annotation which is applied on a method to specify that it returns a bean to be managed by Spring context. Spring Bean annotation is usually declared in Configuration classes methods.
   @Configuration
   public class CollegeConfig {
     // Using Bean annotation to create
       // College class Bean
       @Bean
     // Here the method name is the
       // bean id/bean name
       public College collegeBean()
       {
           // Return the College object
           return new College();
       }
   }


Q5. What is the difference between BeanFactory and ApplicationContext?
Both are interfaces for Spring IoC container but with different features.
BeanFactory is the basic container and is used for simple scenarios.
ApplicationContext is a more advanced container that supports internationalization, event propagation, AOP, etc.
ApplicationContext loads all beans at startup (eager loading), whereas BeanFactory uses lazy loading.
ApplicationContext is preferred in most real-world applications due to its extended capabilities.
Both are responsible for managing beans and their dependencies.

Q6. What are the different types of Dependency Injection in Spring?
Spring supports two main types of Dependency Injection:
Constructor Injection – Dependencies are passed through the class constructor.
Setter Injection – Dependencies are set using setter methods.
Constructor Injection ensures required dependencies are not null.
Setter Injection is more flexible and useful for optional dependencies.
Both types can be configured via XML, annotations (@Autowired), or Java config.
You can also mix both types in a single class if needed.

Q7. What is the role of the ApplicationContext in Spring?
ApplicationContext is the central interface to the Spring IoC container.
It is responsible for instantiating, configuring, and assembling beans.
It provides advanced features like event propagation, internationalization, AOP support, and bean lifecycle handling.
Common implementations include ClassPathXmlApplicationContext, AnnotationConfigApplicationContext, etc.
It reads configuration metadata and manages bean creation and dependency injection.
It's the recommended container to use over BeanFactory in real-world applications.

Q8. What are the different bean scopes in Spring?
Spring provides five common bean scopes:
Singleton (default) – One shared instance per Spring container.
Prototype – A new instance every time it's requested.
Request – One bean per HTTP request (used in Spring Web).
Session – One bean per HTTP session.
Application – One bean per web application lifecycle.
You can define the scope using @Scope("prototype") or in XML.

Q9. What is annotation-based configuration in Spring?
Annotation-based configuration allows you to use annotations to configure Spring beans instead of XML.
Common annotations include @Component, @Service, @Repository, and @Controller.
@Autowired is used for dependency injection.
@Configuration and @Bean are used for Java-based configuration.
It simplifies the code and makes it easier to manage and maintain.
Spring automatically scans and registers beans using @ComponentScan.

Q10. What is the use of the @Component annotation?
@Component is a generic stereotype annotation used to define a Spring-managed bean.
When Spring performs component scanning, it automatically detects classes annotated with @Component.
It can be used on any class to register it as a bean in the Spring container.
Other specific stereotypes like @Service, @Repository, and @Controller are specializations of @Component.
Using @ComponentScan, Spring locates and registers these components.
This reduces XML configuration and improves readability.

Q11. What is Autowiring in Spring?
Autowiring allows Spring to automatically resolve and inject dependencies into a bean.
Spring looks for a suitable bean and injects it into the target bean without explicit configuration.
There are several autowiring modes: no, byName, byType, constructor, and autodetect (deprecated).
You can use the @Autowired annotation to enable autowiring in annotations-based configuration.
Spring will throw an error if no matching bean is found unless marked with @Autowired(required = false).
Autowiring reduces the need for manual wiring in configuration files.

Q12. What is the difference between @Component, @Service, @Repository, and @Controller?
All four are stereotype annotations used for component scanning and registering beans.
@Component is a generic stereotype for any bean.
@Service is used for service layer classes (business logic).
@Repository is used for DAO classes and provides exception translation.
@Controller is used in Spring MVC for handling web requests.
They improve code readability and have specific purposes in layered architecture.
All of them are detected by @ComponentScan.

Q13. What is the Bean Lifecycle in Spring?
The Spring Bean lifecycle consists of multiple stages:
Bean instantiation by Spring container.
Dependency Injection (populating properties).
BeanNameAware, BeanFactoryAware, etc. if implemented.
InitializingBean's afterPropertiesSet() or a custom init method is called.
The bean is ready for use.
When the container is closed, DisposableBean's destroy() or a custom destroy method is called.
You can define custom init/destroy methods using annotations or XML config.

Q14. What is Java-based configuration in Spring?
Java-based configuration uses @Configuration annotated classes to define beans using methods marked with @Bean.
It eliminates the need for XML configuration and is type-safe and refactor-friendly.
You can use @ComponentScan to automatically detect and register beans.
It gives full control over bean creation and wiring through Java code.
Helps in organizing configuration logic into multiple classes.
Commonly used in modern Spring applications, especially with Spring Boot.

Q15. What is AOP in Spring?
AOP stands for Aspect-Oriented Programming — it helps in separating cross-cutting concerns like logging, security, transactions, etc.
In Spring, AOP is implemented using proxies and supports both XML and annotation-based configuration.
Key concepts include Aspect, Join Point, Advice, Pointcut, and Weaving.
@Aspect defines the class as an aspect; @Before, @After, @Around define the advice types.
Spring AOP is proxy-based and supports method-level interception.
It promotes cleaner code by removing boilerplate logic from business code.

Q16. What is the difference between @Autowired and @Inject?
@Autowired is a Spring-specific annotation used to inject dependencies automatically.
@Inject is a standard Java annotation defined in JSR-330 (Java Dependency Injection).
Both work similarly in Spring and can be used for constructor, field, or setter injection.
Spring provides more features with @Autowired, like the required attribute.
If both annotations are present, Spring prefers its own (@Autowired).
In general, use @Autowired if you rely only on Spring; use @Inject for portability.

Q17. What is @Qualifier in Spring?
When multiple beans of the same type exist, Spring cannot decide which one to inject.
@Qualifier is used along with @Autowired to specify which bean should be injected.
It resolves ambiguity by explicitly naming the bean to use.
For example: @Qualifier("employeeService").
It works with constructor, setter, or field injection.
This helps in precise dependency management in large applications.

Q18. How does Spring resolve dependencies internally?
Spring resolves dependencies using the IoC container, which maintains a map of bean definitions.
When a bean is requested, Spring either retrieves an existing singleton or creates a new one based on scope.
It uses reflection to inject dependencies through constructors, fields, or setters.
Annotations like @Autowired, @Qualifier, and configuration metadata guide the resolution.
Circular dependencies are managed using proxies and intermediate references.
Spring throws errors if required beans are missing unless handled explicitly.

Q19. What is the difference between Singleton and Prototype scope in Spring?
Singleton scope creates only one instance of the bean per Spring container.

Prototype scope creates a new bean instance every time it is requested.
Singleton is the default and is ideal for stateless, shared services.
Prototype is used when each user/action requires a new instance (stateful objects).
To define scope: use @Scope("prototype") or configure it in XML.
Be cautious using prototype with singleton beans as Spring won’t manage full lifecycle.

Q20. How do you define a custom init and destroy method for a bean?
Spring allows defining custom initialization and destruction methods.
You can configure them in XML using init-method and destroy-method attributes.
In Java config, use @Bean(initMethod = "init", destroyMethod = "cleanup").
In annotation-based beans, you can also use @PostConstruct and @PreDestroy.
These methods are invoked during the bean lifecycle by the Spring container.
They are useful for resource setup and cleanup.

Q21. What is the use of @PostConstruct and @PreDestroy annotations in Spring?
@PostConstruct is used to mark a method that should run after the bean's properties are initialized.
@PreDestroy marks a method that should run before the bean is removed from the container.
These annotations are part of javax.annotation and work only for singleton beans.
They are typically used for resource initialization and cleanup tasks.
Spring calls these methods automatically during the bean lifecycle.
They replace the need for explicitly specifying init and destroy methods in config.

Q22. What is the difference between ApplicationContext and WebApplicationContext?
ApplicationContext is the core IoC container used in standalone and general Spring applications.
WebApplicationContext is a specialized version of ApplicationContext used in web applications.
It provides extra features like access to the ServletContext and is tied to the web layer.
In Spring MVC, it is initialized by the DispatcherServlet.
WebApplicationContext can inherit configuration from the root ApplicationContext.
It is used for resolving view resolvers, handler mappings, and controllers.

Q23. What is the use of @Primary annotation in Spring?
@Primary is used to mark a bean as the default when multiple candidates of the same type exist.
It is helpful in cases where Spring is unable to decide which bean to inject.
If no @Qualifier is specified, Spring uses the bean marked as @Primary.
You can only have one @Primary bean per type.
It works with both field and constructor injection.
It makes configuration simpler when one bean should be preferred over others.

Q24. What is the use of @Configuration annotation?
@Configuration is used to declare a class as a source of Spring bean definitions.
It tells Spring that the class contains one or more @Bean methods.
Each @Bean method returns a bean that will be managed by the Spring container.
It is used in Java-based configuration to replace XML-based configuration.
It ensures beans are created as singletons by default.
Spring processes these classes to build the application context.

Q25. What is @Bean annotation and how is it different from @Component?
@Bean is used in @Configuration classes to define and register beans manually.
It provides full control over the creation of bean instances.
@Component is used to auto-detect and register beans during classpath scanning.
@Bean is ideal for third-party classes or complex bean creation.
@Component is better for your own classes and simpler registration.
Both result in Spring-managed beans but differ in configuration style.

Q26. What is the difference between @ComponentScan and @Import in Spring?
@ComponentScan is used to scan packages for Spring components like @Component, @Service, etc.
It helps in automatic bean registration through classpath scanning.
@Import is used to import additional @Configuration classes into the current context.
While @ComponentScan focuses on discovering beans, @Import helps organize Java-based configuration.
You can use them together in @Configuration classes to build a modular setup.
@Import is useful in large projects where config is split into multiple classes.

Q27. What is Spring Expression Language (SpEL)?
SpEL is a powerful expression language supported by Spring for querying and manipulating objects.
It can be used in annotations like @Value, XML configurations, or programmatically.
SpEL supports property access, method calls, arithmetic and logical operators, etc.
Example: @Value("#{2 * T(Math).PI}") or @Value("#{employee.name}").
It is often used to inject dynamic values into beans.
SpEL increases the flexibility of Spring configuration.

Q28. What is the purpose of PropertyPlaceholderConfigurer or @Value in Spring?
PropertyPlaceholderConfigurer is a legacy bean used in XML config to read values from .properties files.
In annotation-based config, @Value is used to inject property values directly into fields.
Example: @Value("${db.username}") injects a value from application.properties.
This helps in externalizing configuration and keeping code environment-independent.
You can use @PropertySource with @Configuration to load the property file.
This supports cleaner and more manageable configuration setups.

Q29. How does Spring manage transaction management?
Spring provides both programmatic and declarative transaction management.
Declarative management is most common and is done using the @Transactional annotation.
Spring uses PlatformTransactionManager behind the scenes for transaction handling.
It supports multiple transaction APIs like JDBC, Hibernate, and JPA.
You can define transaction behavior like rollback, isolation, and propagation.
It helps in ensuring data consistency across service operations.

Q30. What is circular dependency in Spring and how is it handled?
Circular dependency occurs when two or more beans depend on each other directly or indirectly.
Spring can resolve circular dependencies in the case of setter injection by using early references.
It cannot resolve circular dependencies with constructor injection and throws an exception.
Proper design and separation of responsibilities can prevent such issues.
Spring detects and reports circular dependencies during context initialization.
You can break the loop by using @Lazy injection or restructuring your beans.

Q31. What are the benefits of using the Spring Framework?
Spring promotes loose coupling through dependency injection and interface-based programming.
It supports modular development, allowing separation of concerns.
Spring provides a unified programming model across tiers (web, data, service, etc.).
It offers integration with popular technologies like Hibernate, JPA, JMS, and others.
Spring simplifies transaction management and AOP implementation.
Its ecosystem (Spring Boot, Spring Security, Spring Data) makes development faster and more efficient.

Q32. What is an interface injection?
Interface Injection is a form of dependency injection where dependencies are provided through an interface.
The dependent class implements an interface that provides a method to set the dependency.
Spring does not support interface injection directly — it only supports constructor and setter injection.
However, this concept exists in general DI design patterns.
It ensures that the dependency must follow a specific contract.
It’s rarely used in Spring but is a part of overall DI theory.

Q33. What is the default scope of a bean in Spring?
The default scope of a bean in Spring is Singleton.
This means that only one instance of the bean is created per Spring container.
This single instance is reused wherever the bean is injected.
Singleton scope is memory-efficient and is suitable for stateless services.
You can override the default scope using @Scope("prototype") or XML.
Other scopes like request, session, etc., are available in Spring Web.

Q34. What is the use of FactoryBean in Spring?
FactoryBean is a special interface in Spring used to create complex or dynamic bean instances.
Instead of returning the factory itself, Spring returns the object produced by the factory.
You implement getObject() to return the actual bean and getObjectType() to declare the type.
It is useful when bean creation involves custom logic (e.g., proxy objects, third-party components).
To get the actual factory, prefix the bean name with & (e.g., &myFactoryBean).
It enhances flexibility in bean creation.

Q35. What is the difference between @Controller and @RestController in Spring?
@Controller is used in Spring MVC to mark a class that handles web requests and returns views (e.g., JSP).
@RestController is a specialized version of @Controller introduced in Spring 4.
It combines @Controller and @ResponseBody, meaning it returns JSON or XML data directly.
@RestController is used in RESTful web services.
In @Controller, you need to use @ResponseBody manually for JSON responses.
Use @RestController when building APIs, and @Controller for web applications with UI.

Q36. What is Dependency Lookup in Spring?
Dependency Lookup is a technique where a bean actively retrieves its dependencies from the Spring container.
It’s the opposite of Dependency Injection, where the container provides the dependency automatically.
It can be done using ApplicationContext.getBean("beanName").
Dependency Lookup increases coupling between the bean and the container.
It is used in some scenarios like dynamic bean resolution or runtime decisions.
However, Dependency Injection is preferred for better testability and design.

Q37. What is Environment abstraction in Spring?
Spring’s Environment abstraction provides a way to access properties, profiles, and environment variables.
You can use @Value, Environment.getProperty(), or @ConfigurationProperties to fetch values.
It helps in externalizing configuration and writing environment-independent applications.
It also allows setting and activating profiles like dev, test, or prod.
You can inject the Environment bean directly into your classes.
Useful for writing flexible and configurable applications.

Q38. What is the difference between BeanFactory and ApplicationContext?
BeanFactory is the basic Spring IoC container providing fundamental DI capabilities.
ApplicationContext extends BeanFactory and adds more enterprise-level features.
These include event publishing, internationalization, annotation support, and AOP integration.
ApplicationContext eagerly loads singleton beans, while BeanFactory uses lazy loading.
BeanFactory is used in lightweight or memory-constrained environments.
In real-world projects, ApplicationContext is preferred.

Q39. What is a proxy in Spring and why is it used?
A proxy in Spring is an object that wraps a target bean to provide additional functionality.
Spring uses proxies for Aspect-Oriented Programming (AOP) and transaction management.
It can be a JDK dynamic proxy (for interfaces) or a CGLIB proxy (for classes).
Proxies intercept method calls and apply cross-cutting logic like logging, security, or transactions.
Spring creates these proxies at runtime.
This keeps the core business logic clean and focused.

Q40. What is the @Lazy annotation in Spring?
@Lazy tells Spring to delay the creation of a bean until it is first needed.
By default, Spring creates singleton beans eagerly at startup.
With @Lazy, the bean is created only when it is requested (lazy initialization).
It can be used on individual beans or at the class level.
It helps in optimizing startup time and resolving circular dependencies.
Example: @Lazy @Autowired private MyBean myBean;

Q41. What is an ApplicationEvent in Spring?
ApplicationEvent is part of Spring’s event-driven programming model.
It allows beans to communicate in a loosely coupled way via events.
You can create a custom event class by extending ApplicationEvent.
Use ApplicationEventPublisher to publish events and @EventListener or ApplicationListener to listen to them.
This is useful for actions like sending notifications, logging, or auditing after key events.
It promotes decoupling between components in large applications.

Q42. What is the role of @Required annotation in Spring?
@Required marks a bean property as mandatory for injection.
It’s applied to setter methods to indicate that the value must be provided.
If the property is not set, Spring throws a BeanInitializationException.
However, this annotation is deprecated since Spring 5, and it's recommended to use constructor injection instead.
Modern alternatives include validation frameworks like @NotNull or bean validation APIs.
It was mainly used in XML and older Java-based configurations.

Q43. What is the use of @DependsOn in Spring?
@DependsOn tells Spring to initialize one or more beans before the current bean.
It is useful when a bean has an indirect dependency or relies on some initialization logic.
Example: @DependsOn("dataSource") ensures that the dataSource bean loads before this one.
This helps in controlling the initialization order of beans.
It's typically used when relying on side-effects of another bean.
However, use it carefully to avoid tight coupling.

Q44. What are some common causes of memory leaks in Spring applications?
Common causes include:
Improper bean scopes (like using prototype in long-lived beans).
Static references holding Spring beans.
Listener beans not being deregistered.
Incorrect cache usage that retains objects longer than needed.
Not closing resources (DB connections, threads) manually when using prototype scope.
Proper resource management, profiling tools, and avoiding circular references help prevent leaks.

Q45. How can you create a thread-safe singleton bean in Spring?
By default, singleton beans are thread-safe only if you design them to be stateless.
To make them thread-safe:
Avoid mutable shared state or synchronize access.
Use ThreadLocal for thread-specific data.
For stateful beans, use prototype scope or create synchronized methods.
Spring itself does not guarantee thread safety of beans—it depends on your implementation.
Always follow best practices for concurrent programming.

Q47. What is the role of the @Value annotation in Spring?
@Value is used to inject literal values or external configuration values into Spring beans.
It can be used with primitive types, Strings, or SpEL expressions.
Example: @Value("${db.username}") injects value from a .properties file.
You can also perform basic operations like @Value("#{2 * 5}").
It promotes externalized configuration and dynamic expressions.
This is often used in combination with @PropertySource.

Q52. What is the use of @Scope annotation in Spring?
@Scope defines the lifecycle and visibility of a Spring bean.
Common scopes include singleton (default), prototype, request, session, and application.
singleton creates one shared instance per container, while prototype creates a new bean on each request.
request and session scopes are used in web apps for HTTP request and session lifecycles.
It helps control resource usage and bean behavior according to the application's needs.
You can declare scope at the class level with @Scope("prototype").

Q55. What are stereotypes annotations in Spring?
Stereotype annotations are used to classify Spring-managed components by their role:
@Component: generic stereotype for any Spring-managed bean
@Service: marks a service layer bean
@Repository: marks a DAO (data access) layer bean, adds exception translation
@Controller: marks web controller classes
They help organize code and assist Spring in component scanning.
Using stereotypes improves code readability and maintainability.

Q58. What is the difference between @Component, @Service, and @Repository annotations?
All three are stereotype annotations for Spring beans, detected during component scanning.
@Component is a generic annotation for any Spring-managed bean.
@Service indicates a service layer bean and is used for business logic.
@Repository marks a DAO or repository bean and enables exception translation from persistence exceptions to Spring’s DataAccessException.
While functionally similar, they convey different semantic meanings to developers and tools.
Using them improves code clarity and layering.











