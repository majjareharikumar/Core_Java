Q1. What is Spring Security?
Spring Security is a powerful and customizable framework that provides authentication and authorization to Java applications.
It helps protect applications against common security threats like session fixation, clickjacking, and CSRF attacks.
Spring Security integrates seamlessly with Spring applications, supporting various authentication mechanisms such as form login, OAuth2, and LDAP.
It provides declarative security via annotations and XML configuration.
The framework is highly extensible and supports both web and method-level security.
It’s widely used to secure both monolithic and microservice-based applications.

Q2. What are the main components of Spring Security?
Key components include:

AuthenticationManager: Validates user credentials.

UserDetailsService: Loads user-specific data like username, password, and roles.

SecurityContext: Holds the security information of the current user.

Filters: Intercept HTTP requests to apply security checks (e.g., UsernamePasswordAuthenticationFilter).

AccessDecisionManager: Decides if a user has permission to access a resource.
Together, these components form a robust security pipeline.

Q3. What is Authentication and Authorization in Spring Security?
Authentication verifies the identity of a user, ensuring they are who they claim to be.
Spring Security handles authentication using credentials like username and password.
Authorization determines what authenticated users are allowed to do, controlling access to resources based on roles or permissions.
After successful authentication, Spring Security checks if the user has the necessary authorities for requested operations.
Both are essential for application security: authentication first, then authorization.
Spring Security provides fine-grained control over both.

Q4. What is the role of UserDetails and UserDetailsService?
UserDetails is an interface that represents user information, including username, password, and granted authorities (roles/permissions).
UserDetailsService is used to load user-specific data during authentication.
You implement UserDetailsService to fetch user details from a database or another source.
Spring Security uses UserDetailsService internally to authenticate and authorize users.
This separation allows easy customization of user management logic.
It’s a core part of the authentication mechanism.

Q5. How do you configure in-memory authentication in Spring Security?
In-memory authentication stores user credentials directly in the configuration (usually for testing).
Using AuthenticationManagerBuilder, you can define users, passwords, and roles.
For example:
auth.inMemoryAuthentication()
    .withUser("user").password("{noop}password").roles("USER");
{noop} indicates no password encoding (plain text).
In-memory authentication is simple but not suitable for production.
It’s useful for quick demos and testing security rules.

Q6. What is Password Encoding in Spring Security and why is it important?
Password encoding is the process of transforming a plain text password into a secure format before storing it.
Spring Security provides password encoders like BCryptPasswordEncoder, SCryptPasswordEncoder, and NoOpPasswordEncoder.
Encoding passwords protects against attacks like brute force and rainbow table attacks.
Using strong encoders like BCrypt adds salt and applies hashing multiple times, making passwords hard to reverse.
Spring Security requires passwords to be encoded during authentication to match stored credentials securely.
Never store plain text passwords in production; always use password encoding.

Q7. What is CSRF and how does Spring Security handle it?
CSRF (Cross-Site Request Forgery) is an attack where unauthorized commands are transmitted from a user trusted by the application.
Spring Security protects against CSRF by generating a unique token per user session.
This token must be included in state-changing HTTP requests (POST, PUT, DELETE).
If the token is missing or invalid, Spring Security rejects the request.
CSRF protection is enabled by default in Spring Security for web applications.
Developers can customize or disable it if necessary (e.g., for stateless REST APIs).

Q8. What are Security Filters in Spring Security?
Security filters are servlet filters that intercept HTTP requests and responses to apply security logic.
Spring Security defines a filter chain with filters like UsernamePasswordAuthenticationFilter and BasicAuthenticationFilter.
Filters perform tasks such as authentication, authorization, and CSRF validation.
They are ordered carefully to enforce security correctly.
You can customize or add your own filters in the filter chain.
Filters form the core of Spring Security’s request processing pipeline.

Q9. How can you secure REST APIs with Spring Security?
To secure REST APIs, Spring Security supports stateless authentication using tokens like JWT.
Disable session creation and CSRF protection since REST is stateless.
Use HttpSecurity to configure endpoint authorization rules with antMatchers().
Implement token validation filters to authenticate each request.
You can also use OAuth2 with JWT for more advanced authorization.
This approach protects APIs while maintaining scalability.

Q10. What is the difference between @PreAuthorize and @Secured annotations?
@PreAuthorize allows expression-based access control using SpEL (Spring Expression Language), offering flexible security rules.
For example, @PreAuthorize("hasRole('ADMIN') and #user.name == authentication.name").
@Secured is simpler, specifying roles directly like @Secured("ROLE_ADMIN").
@PreAuthorize works before method invocation; @Secured is limited to role checks.
@PreAuthorize is more powerful and preferred for complex authorization.
Both annotations enable method-level security.

Q11. What is OAuth2 and how does Spring Security support it?
OAuth2 is an authorization framework that allows third-party applications to obtain limited access to HTTP services.
It separates the roles of resource owner, client, authorization server, and resource server.
Spring Security provides comprehensive support for OAuth2, enabling authentication and authorization flows.
You can configure Spring Security as an OAuth2 client or resource server.
It supports standard flows like Authorization Code, Implicit, Client Credentials, and Password.
OAuth2 integration simplifies secure access delegation to APIs and web apps.

Q12. What is JWT and how is it used in Spring Security?
JWT (JSON Web Token) is a compact, URL-safe token format for securely transmitting information between parties.
It consists of a header, payload, and signature to verify integrity and authenticity.
Spring Security can use JWTs for stateless authentication in REST APIs.
After login, the server issues a JWT, which clients include in request headers for subsequent calls.
The server validates the token to authenticate and authorize users without sessions.
JWTs improve scalability by avoiding server-side session storage.

Q13. How does method-level security work in Spring Security?
Method-level security protects individual service methods using annotations like @Secured, @PreAuthorize, and @PostAuthorize.
You enable it with @EnableGlobalMethodSecurity in configuration.
This allows fine-grained access control beyond URL restrictions.
For example, @PreAuthorize("hasRole('ADMIN')") restricts method access to admins only.
It integrates with Spring Security’s authentication context.
Method security helps secure business logic directly.

Q14. How do you customize Spring Security’s login page?
By default, Spring Security provides a basic login page.
To customize, you disable the default with .formLogin().disable() or .loginPage("/custom-login").
Then you create your own login HTML page and map the controller to serve it.
You handle form submission and authentication via Spring Security filters.
You can customize error messages, logout, and success redirects.
Custom login pages improve user experience and branding.

Q15. What is SecurityContext and SecurityContextHolder?
SecurityContext holds security information about the current authenticated user, including credentials and roles.
SecurityContextHolder is a helper class that stores the SecurityContext in a thread-local variable.
It ensures security information is available throughout the lifecycle of a request or thread.
You can access the authenticated user via SecurityContextHolder.getContext().getAuthentication().
It is central to Spring Security’s context propagation.
This mechanism supports authentication and authorization checks.

Q16. What is a Security Filter Chain in Spring Security?
The Security Filter Chain is a sequence of filters that apply security logic to incoming HTTP requests.
Each filter handles a specific concern, such as authentication, authorization, session management, or CSRF protection.
Spring Security configures this chain automatically but allows customization.
Filters are invoked in a defined order to ensure proper processing.
Developers can add custom filters to extend or override default behavior.
The chain ensures requests are securely processed before reaching the application.

Q17. How does Spring Security support session management?
Spring Security manages sessions to prevent attacks like session fixation and unauthorized access.
It supports configuring session creation policies such as IF_REQUIRED, NEVER, STATELESS.
Session fixation protection changes session ID after login to prevent hijacking.
Developers can limit concurrent sessions per user and control session expiration.
Spring Security integrates with HTTP sessions transparently.
Proper session management enhances overall application security.

Q18. What is the difference between Basic Authentication and Form-Based Authentication?
Basic Authentication sends user credentials encoded in the HTTP header with every request.
It’s simple but less secure without HTTPS, and it doesn’t provide a custom login UI.
Form-Based Authentication presents a login page where users submit credentials.
Spring Security processes these credentials and manages sessions on the server.
Form login supports better user experience with redirects, error messages, and customization.
Both methods authenticate users but differ in flow and security features.

Q19. How do you enable HTTPS in a Spring Boot application secured by Spring Security?
To enable HTTPS, you configure an SSL certificate (self-signed or CA-issued) in the application.
In application.properties, set server.ssl.key-store, server.ssl.key-store-password, and related SSL properties.
Spring Boot will start an embedded server with HTTPS support.
Spring Security automatically works over HTTPS without extra config.
Redirect HTTP to HTTPS can be configured using security or web server settings.
HTTPS encrypts communication, essential for protecting sensitive data.

Q20. What are Granted Authorities in Spring Security?
Granted Authorities represent permissions or roles assigned to an authenticated user.
They are stored in the Authentication object within the security context.
Roles like ROLE_ADMIN or permissions like READ_PRIVILEGES are examples.
Access decisions are based on these authorities.
They help implement fine-grained authorization checks at URL or method level.
Authorities enable flexible and extensible security models.

Q21. What is Anonymous Authentication in Spring Security?
Anonymous Authentication allows users who are not logged in to access specific parts of an application.
Spring Security assigns an AnonymousAuthenticationToken to such users with limited authorities.
This lets the application distinguish between authenticated users and anonymous ones.
You can configure which URLs allow anonymous access via security configuration.
It’s useful for public pages or guest users with restricted rights.
This mechanism helps balance security and accessibility.

Q22. What is Remember-Me functionality in Spring Security?
Remember-Me allows users to stay logged in even after closing the browser.
It works by storing a persistent token (cookie) on the client side.
Spring Security authenticates users automatically using this token on subsequent visits.
Two types exist: token-based and persistent-token-based Remember-Me services.
Remember-Me improves user convenience but should be used carefully for security.
It can be configured with options like token validity and key rotation.

Q23. How can you handle Access Denied exceptions in Spring Security?
When a user tries to access a resource without proper permissions, Spring Security throws an AccessDeniedException.
You can customize the handling by implementing AccessDeniedHandler.
This allows redirecting users to a custom "Access Denied" page or returning a specific HTTP status.
In web security config, you use .exceptionHandling().accessDeniedHandler().
Proper handling improves user experience and security feedback.
You can also log denied attempts for auditing.

Q24. What is the difference between hasRole() and hasAuthority() in Spring Security expressions?
hasRole() checks if the user has a given role, automatically prefixing the role with ROLE_.
For example, hasRole('ADMIN') checks for ROLE_ADMIN.
hasAuthority() checks for an exact authority without adding prefixes.
You use hasAuthority() when authorities don’t follow the ROLE_ naming convention.
Both are used in SpEL expressions for method or URL security.
Choosing depends on your roles and authorities naming strategy.

Q25. What is the purpose of SecurityConfigurerAdapter in Spring Security?
SecurityConfigurerAdapter is a base class to configure security components like HTTP security or authentication.
You extend it to customize the security filter chain or authentication providers.
It provides a fluent API to build and customize security configuration.
Spring Security internally uses configurers to modularize security setup.
Custom configurers allow complex setups like multiple authentication mechanisms.
It enhances flexibility and maintainability of security configurations.

Q26. How does Spring Security integrate with Thymeleaf for securing views?
Spring Security integrates seamlessly with Thymeleaf using the thymeleaf-extras-springsecurity5 module.
It provides security-specific tags like sec:authorize to conditionally render content based on roles or authentication status.
For example:

html
Copy
Edit
<div sec:authorize="hasRole('ADMIN')">Admin Content</div>
It helps control UI elements based on user permissions.
This ensures that unauthorized users don’t even see buttons or links they can't access.

Q27. What is Role Hierarchy in Spring Security?
Role Hierarchy allows you to define relationships between roles, such that higher roles automatically inherit lower role permissions.
For example, if ADMIN > USER, then an admin is also treated as a user.
You define this in a RoleHierarchyImpl bean.
This simplifies authorization rules and avoids redundant configurations.
Spring evaluates the hierarchy during access decisions.
It’s useful in enterprise applications with layered roles.

Q28. How can you disable security for specific URLs in Spring Security?
You can disable security for certain URLs by using .antMatchers("/public/**").permitAll() in your HttpSecurity config.
You can also completely ignore requests from the filter chain using .web.ignoring().antMatchers("/resources/**").
This is often used for static resources like CSS or JS.
It improves performance and ensures unauthenticated users can access public content.
Always limit permitAll() usage to non-sensitive endpoints.
Correct use of patterns is essential to avoid security leaks.

Q29. What is SecurityContextPersistenceFilter?
SecurityContextPersistenceFilter is responsible for storing and retrieving the SecurityContext across requests.
It loads the context at the beginning and clears it at the end of each request.
In session-based applications, it ensures that security context is preserved for logged-in users.
This filter is one of the first in the Spring Security filter chain.
It plays a critical role in enabling thread-local access to authentication info.
Without it, the context wouldn't persist between requests.

Q30. What are the best practices for securing a Spring Boot application?
Always use HTTPS to encrypt data in transit.
Store passwords using strong encoders like BCrypt.
Use @PreAuthorize for method-level security.
Disable CSRF for stateless REST APIs, but enable it for web apps.
Apply least privilege by defining fine-grained roles.
Limit session timeout and concurrent sessions.
Validate all user inputs to avoid injection attacks.

Q31. How do you secure a REST API using Spring Security without sessions (stateless)?
To secure a REST API statelessly, disable sessions using .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).
Use token-based authentication like JWT, where the token is sent in the Authorization header for each request.
Spring Security validates the token in a custom filter and sets the authentication in the SecurityContext.
Disable CSRF since there's no session.
Also, restrict access using .authorizeRequests() and antMatchers() for role-based access.
Stateless APIs scale better and fit microservices architecture.

Q32. What is SecurityFilterChain in Spring Security 5.7+ and Spring Boot 3+?
As of Spring Security 5.7, SecurityFilterChain replaces WebSecurityConfigurerAdapter for security configuration.
You define a @Bean of type SecurityFilterChain and configure it using HttpSecurity.
Example:

@Bean
SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http.authorizeRequests().anyRequest().authenticated();
    return http.build();
}
It promotes a more functional and modular approach to security.
Spring Boot 3 encourages this modern, component-based configuration.

Q33. How do you create a custom login success and failure handler?
Implement AuthenticationSuccessHandler and AuthenticationFailureHandler interfaces.
In onAuthenticationSuccess(), define custom logic like logging or redirecting.
In onAuthenticationFailure(), handle failed login attempts (e.g., lockout, custom messages).
Configure them via .formLogin().successHandler().failureHandler() in HttpSecurity.
This gives you control over post-login behavior.
It’s useful for tracking login metrics or enforcing policies.

Q34. What is the difference between permitAll(), authenticated(), and hasRole()?
permitAll() allows everyone to access the endpoint, even unauthenticated users.
authenticated() allows only users who are logged in.
hasRole('ROLE_ADMIN') (or hasRole("ADMIN")) restricts access to users with a specific role.
These methods are used in authorizeRequests() to define access rules.
Combining them helps secure different parts of the app.
Always apply least privilege to endpoints.

Q35. How do you handle logout in Spring Security?
Spring Security provides automatic logout handling using .logout() configuration.
By default, it invalidates the HTTP session and clears authentication.
You can customize logout success URL, clear cookies, and add a logout handler.
Example:
http.logout().logoutUrl("/logout").logoutSuccessUrl("/login?logout");
For stateless APIs, logout usually involves deleting the JWT token on the client side.
Logout ensures users exit the system securely.


